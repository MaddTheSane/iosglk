/* GlkUtilities.m: Miscellaneous C-callable functions
	for IosGlk, the iOS implementation of the Glk API.
	Designed by Andrew Plotkin <erkyrath@eblong.com>
	http://eblong.com/zarf/glk/
*/

/*	A few utility functions that don't fit into any ObjC classes. (Either because they need to be C-callable, or just because.)
*/

#import "GlkUtilities.h"

/* Turn a string into pure-ASCII data -- in fact, into hex data. I'm not concerned with efficiency here, obviously.
*/
NSString *StringToDumbEncoding(NSString *str) {
	if (str.length == 0)
		return @"";
	
	NSData *indata = [str dataUsingEncoding:NSUTF8StringEncoding];
	unsigned char *inbytes = (unsigned char *)indata.bytes;
	NSMutableData *outdata = [NSMutableData dataWithLength:(indata.length)*2];
	unsigned char *outbytes = outdata.mutableBytes;
	for (int ix=0; ix<indata.length; ix++) {
		unsigned char ch = inbytes[ix];
		outbytes[ix*2] = ((ch >> 4) & 0xF);
		outbytes[ix*2+1] = (ch & 0xF);
		if (outbytes[ix*2] <= 9)
			outbytes[ix*2] += '0';
		else
			outbytes[ix*2] += ('A'-10);
		if (outbytes[ix*2+1] <= 9)
			outbytes[ix*2+1] += '0';
		else
			outbytes[ix*2+1] += ('A'-10);
	}
	
	return [[[NSString alloc] initWithData:outdata encoding:NSASCIIStringEncoding] autorelease];
}

/* Turn a string generated by the above dumb encoding back into a normal string. If not possible, this returns nil.
*/
NSString *StringFromDumbEncoding(NSString *str) {
	if (str.length == 0)
		return @"";
	
	NSData *indata = [str dataUsingEncoding:NSASCIIStringEncoding];
	if (!indata)
		return nil;
	unsigned char *inbytes = (unsigned char *)indata.bytes;
	NSMutableData *outdata = [NSMutableData dataWithLength:(indata.length)/2];
	unsigned char *outbytes = outdata.mutableBytes;
	for (int ix=0; ix<(indata.length)/2; ix++) {
		unsigned char nybhi = inbytes[ix*2];
		unsigned char nyblo = inbytes[ix*2+1];
		if (nybhi >= '0' && nybhi <= '9')
			nybhi -= '0';
		else if (nybhi >= 'A' && nybhi <= 'F')
			nybhi -= ('A'-10);
		else
			return nil;
		if (nyblo >= '0' && nyblo <= '9')
			nyblo -= '0';
		else if (nyblo >= 'A' && nyblo <= 'F')
			nyblo -= ('A'-10);
		else
			return nil;
		outbytes[ix] = (nybhi << 4) | (nyblo);
	}
	
	return [[[NSString alloc] initWithData:outdata encoding:NSUTF8StringEncoding] autorelease];
}

/* Return a string showing the size of a rectangle. (For debugging.) */
NSString *StringFromRect(CGRect rect) {
	return [NSString stringWithFormat:@"%.1fx%.1f at %.1f,%.1f", 
		rect.size.width, rect.size.height, rect.origin.x, rect.origin.y];
}

/* Return a string showing a size. (For debugging.) */
NSString *StringFromSize(CGSize size) {
	return [NSString stringWithFormat:@"%.1fx%.1f", size.width, size.height];
}

/* Return a string showing a point. (For debugging.) */
NSString *StringFromPoint(CGPoint pt) {
	return [NSString stringWithFormat:@"%.1f,%.1f", pt.x, pt.y];
}

/* Log a C string to console. */
void nslogc(char *str) {
	NSLog(@"%s", str);
}

extern void sleep_curthread(NSTimeInterval val) {
	[NSThread sleepForTimeInterval:val];
}
